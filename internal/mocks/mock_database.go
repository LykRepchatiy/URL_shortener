// Code generated by MockGen. DO NOT EDIT.
// Source: /home/artem/Documents/URL_shortener/internal/database/database.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	database "url_shortener/internal/database"
	service "url_shortener/internal/service"

	gomock "github.com/golang/mock/gomock"
	pgconn "github.com/jackc/pgconn"
	pgx "github.com/jackc/pgx/v4"
)

// MockQueryRower is a mock of QueryRower interface.
type MockQueryRower struct {
	ctrl     *gomock.Controller
	recorder *MockQueryRowerMockRecorder
}

// MockQueryRowerMockRecorder is the mock recorder for MockQueryRower.
type MockQueryRowerMockRecorder struct {
	mock *MockQueryRower
}

// NewMockQueryRower creates a new mock instance.
func NewMockQueryRower(ctrl *gomock.Controller) *MockQueryRower {
	mock := &MockQueryRower{ctrl: ctrl}
	mock.recorder = &MockQueryRowerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryRower) EXPECT() *MockQueryRowerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockQueryRower) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockQueryRowerMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockQueryRower)(nil).Close), ctx)
}

// Exec mocks base method.
func (m *MockQueryRower) Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range arguments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockQueryRowerMockRecorder) Exec(ctx, sql interface{}, arguments ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, arguments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockQueryRower)(nil).Exec), varargs...)
}

// QueryRow mocks base method.
func (m *MockQueryRower) QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(pgx.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockQueryRowerMockRecorder) QueryRow(ctx, sql interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockQueryRower)(nil).QueryRow), varargs...)
}

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// DBGet mocks base method.
func (m *MockDB) DBGet(DBConn database.QueryRower, short_url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBGet", DBConn, short_url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DBGet indicates an expected call of DBGet.
func (mr *MockDBMockRecorder) DBGet(DBConn, short_url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBGet", reflect.TypeOf((*MockDB)(nil).DBGet), DBConn, short_url)
}

// DBPush mocks base method.
func (m *MockDB) DBPush(DBConn database.QueryRower, short_url string, request service.HTTPModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBPush", DBConn, short_url, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// DBPush indicates an expected call of DBPush.
func (mr *MockDBMockRecorder) DBPush(DBConn, short_url, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBPush", reflect.TypeOf((*MockDB)(nil).DBPush), DBConn, short_url, request)
}

// СheckMatch mocks base method.
func (m *MockDB) СheckMatch(DBConn database.QueryRower, ctx context.Context, short_url, URL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "СheckMatch", DBConn, ctx, short_url, URL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// СheckMatch indicates an expected call of СheckMatch.
func (mr *MockDBMockRecorder) СheckMatch(DBConn, ctx, short_url, URL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "СheckMatch", reflect.TypeOf((*MockDB)(nil).СheckMatch), DBConn, ctx, short_url, URL)
}
