// Code generated by MockGen. DO NOT EDIT.
// Source: /home/artem/Documents/URL_shortener/internal/cache/cache.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCacheInterface is a mock of CacheInterface interface.
type MockCacheInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCacheInterfaceMockRecorder
}

// MockCacheInterfaceMockRecorder is the mock recorder for MockCacheInterface.
type MockCacheInterfaceMockRecorder struct {
	mock *MockCacheInterface
}

// NewMockCacheInterface creates a new mock instance.
func NewMockCacheInterface(ctrl *gomock.Controller) *MockCacheInterface {
	mock := &MockCacheInterface{ctrl: ctrl}
	mock.recorder = &MockCacheInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheInterface) EXPECT() *MockCacheInterfaceMockRecorder {
	return m.recorder
}

// AppendToCache mocks base method.
func (m *MockCacheInterface) AppendToCache(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendToCache", key, value)
}

// AppendToCache indicates an expected call of AppendToCache.
func (mr *MockCacheInterfaceMockRecorder) AppendToCache(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendToCache", reflect.TypeOf((*MockCacheInterface)(nil).AppendToCache), key, value)
}

// GetCache mocks base method.
func (m *MockCacheInterface) GetCache(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCache indicates an expected call of GetCache.
func (mr *MockCacheInterfaceMockRecorder) GetCache(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockCacheInterface)(nil).GetCache), key)
}

// PushCache mocks base method.
func (m *MockCacheInterface) PushCache(key, value string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushCache", key, value)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PushCache indicates an expected call of PushCache.
func (mr *MockCacheInterfaceMockRecorder) PushCache(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushCache", reflect.TypeOf((*MockCacheInterface)(nil).PushCache), key, value)
}
